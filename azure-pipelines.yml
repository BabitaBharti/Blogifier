# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  solution: '**/*.sln'
  webapp_name: 'demo-dot-net-project'

stages:

- stage: Initial_Job
  displayName: 'Code Pull'
  jobs:
  - job: 'Initial_Job'
    steps:
    - checkout: none
    
#####################################################################
      
 
      

####################################################################

- stage: Application_Build
  displayName: 'Application Build'
  dependsOn:
      - Initial_Job
  jobs:
    - job: 
      steps: 
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          useGlobalJson: true
      - task: NuGetToolInstaller@1
        inputs:
          versionSpec: '5.x.x'
          checkLatest: true
      - task: NuGetCommand@2
        inputs:
          command: 'restore'
          restoreSolution: '$(solution)'
          feedsToUse: 'select'
          noCache: true
    
      - script: dotnet build --configuration $(buildConfiguration)
        displayName: 'dotnet build $(buildConfiguration)'


      - task: DotNetCoreCLI@2
        displayName: 'dotnet publish $(buildConfiguration)'
        inputs:
          command: publish
          publishWebProjects: False
          projects: 'src/Blogifier/Blogifier.csproj'
          arguments: '--self-contained --runtime win-x86 --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: True
          
     
########################################################################

- stage: Unit_Test
  displayName: 'Run Unit Testing'
  dependsOn:
      - Application_Build
  jobs:
    - job: 
      pool: 
        vmImage: 'windows-latest'
      steps:      
      - task: DotNetCoreCLI@2
        displayName: 'Run Unit Test'
        inputs:
          command: 'test'
          projects: '**/*.Tests/*.csproj'
          arguments: '--configuration $(buildConfiguration)'


##########################################################################

- stage: WhiteSource_Bolt
  displayName: 'Run WhiteSource_Bolt'
  dependsOn:
      - Application_Build
  jobs:
    - job: 
      
      steps:
      - task: WhiteSource@21
        inputs:
          cwd: '$(System.DefaultWorkingDirectory)'

##########################################################################

- stage: Deployment
  displayName: 'Deployment'
  dependsOn:
      - Unit_Test
      - WhiteSource_Bolt
  
  jobs:
    - job: 
      steps: 
      - task: UseDotNet@2
        inputs:
          packageType: 'sdk'
          useGlobalJson: true
      - task: NuGetToolInstaller@1
        inputs:
          versionSpec: '5.x.x'
          checkLatest: true
      - task: NuGetCommand@2
        inputs:
          command: 'restore'
          restoreSolution: '$(solution)'
          feedsToUse: 'select'
          noCache: true
    
      - script: dotnet build --configuration $(buildConfiguration)
        displayName: 'dotnet build $(buildConfiguration)'


      - task: DotNetCoreCLI@2
        displayName: 'dotnet publish $(buildConfiguration)'
        inputs:
          command: publish
          publishWebProjects: False
          projects: 'src/Blogifier/Blogifier.csproj'
          arguments: '--self-contained --runtime win-x86 --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: True
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(System.DefaultWorkingDirectory)'
          Contents: '**/*.yml'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
  
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'Drop'
      
      
      - task: Ansible@0
        inputs:
          ansibleInterface: 'remoteMachine'
          connectionOverSsh: 'Ansible-serverVM'
          playbookSourceRemoteMachine: 'agentMachine'
          playbookRootRemoteMachine: '(Pipeline.Workspace)/Drop/'
          playbookPathLinkedArtifactOnRemoteMachine: 'web-app.yml'
          inventoriesRemoteMachine: 'hostList'
          inventoryHostListRemoteMachine: '13.71.45.109'
          sudoEnabled: true
          sudoUser: 'ubuntu'
          

             
     
      - task: AzureRmWebAppDeployment@4
        displayName: 'Azure App Service Deploy: $(webapp_name)'
        inputs:
          azureSubscription: 'Pay-As-You-Go (2bf3ae71-d116-484d-a88c-ba149c6430ff)'
          WebAppName: '$(webapp_name)'
          packageForLinux: '$(Pipeline.Workspace)/Drop/(Build.BuildId).zip'
